# Claude Code Implementation Guide: AI-powered Virtual Assistant for Business Optimization

This document contains a series of prompts designed to be fed to Claude Code for implementing a complete AI-powered Virtual Assistant for Business Optimization. The prompts follow a logical progression from project setup through completion.

## Prompt 1: Project Setup and Structure

```
Create a new project called "business-virtual-assistant" with the following structure:
- frontend/ (React application)
- backend/ (Python Flask)
- database/ (MongoDB schemas)
- docker/ (Docker configuration)
- tests/ (Test suites)

Initialize the frontend as a React application with TypeScript support.
Set up the backend with Flask and necessary dependencies for NLP and ML.
Create initial README.md with project overview and setup instructions.
```

## Prompt 2: Backend NLP Engine Core

```
In the backend directory, create the following NLP engine components:

1. Create nlp_engine/intent_classifier.py with:
   - A class for classifying user intents using spaCy
   - Support for core business intents: inventory_check, order_placement, product_inquiry, pricing_question
   - Training methods that can be improved over time

2. Create nlp_engine/entity_extractor.py with:
   - Functions to extract product names, quantities, dates, and business-specific entities
   - Integration with spaCy's NER capabilities
   - Custom entity recognition for product codes and business terminology

3. Create nlp_engine/context_manager.py with:
   - A class to maintain conversation state
   - Methods to track entities mentioned in previous turns
   - Logic to determine when context should be preserved or reset

Add appropriate unit tests for each component in the tests directory.
```

## Prompt 3: Business Logic Integration

```
Create the business logic components that integrate with the NLP engine:

1. Create business_logic/inventory_manager.py with:
   - Class for checking product availability
   - Methods for reserving inventory
   - Functions for generating inventory reports
   - Connect to MongoDB for data storage

2. Create business_logic/order_processor.py with:
   - Order creation functionality
   - Status checking methods
   - Order modification capabilities
   - Integration with inventory system

3. Create business_logic/product_recommender.py with:
   - Basic recommendation engine using TensorFlow
   - Methods to suggest related products
   - Functions to personalize recommendations based on user history

Include appropriate error handling and logging in all components.
```

## Prompt 4: Flask API Development

```
Develop the Flask API to expose our backend functionality:

1. Create app.py with:
   - Flask application setup
   - Configuration loading
   - Main execution logic

2. Create api/chat_endpoints.py with:
   - POST /api/chat endpoint to handle user messages
   - GET /api/conversation/{id} to retrieve conversation history
   - Authentication middleware

3. Create api/admin_endpoints.py with:
   - Endpoints for viewing system status
   - Endpoints for managing inventory
   - Secured access controls

4. Create config.py to manage environment variables and configuration settings

Add appropriate request validation and error handling to all endpoints.
```

## Prompt 5: Machine Learning Models

```
Implement the machine learning components:

1. Create ml_models/model_trainer.py with:
   - Functions to train intent classification models
   - Methods to improve entity recognition
   - Evaluation metrics and validation

2. Create ml_models/response_generator.py with:
   - Templates for structured responses
   - ML-based response selection logic
   - Personalization features

3. Create data/intent_samples/ directory with:
   - JSON files containing sample utterances for each intent
   - Labeling format compatible with our classifiers

Include functionality to periodically retrain models as new data arrives.
```

## Prompt 6: Database Integration

```
Implement database integration:

1. Create database/models.py with:
   - Schemas for products, inventory, orders
   - User and conversation history models
   - MongoDB connection management

2. Create database/seed_data.py with:
   - Initial product catalog data
   - Test user accounts
   - Sample conversation history

Add indexes for performance optimization on frequently queried fields.
```

## Prompt 7: Frontend Chat Interface

```
Develop the React frontend components:

1. Create frontend/src/components/ChatInterface.jsx with:
   - Message input and display
   - Chat history rendering
   - Loading states and typing indicators

2. Create frontend/src/components/ProductCard.jsx for displaying product information

3. Create frontend/src/services/chatService.js with:
   - API methods to communicate with backend
   - WebSocket setup for real-time updates

4. Create frontend/src/services/inventoryService.js for inventory-related API calls

5. Update App.js to incorporate the chat interface

Include responsive design for mobile and desktop devices.
```

## Prompt 8: Admin Dashboard

```
Create admin dashboard components:

1. Create frontend/src/components/admin/Dashboard.jsx with:
   - Overview of system status
   - Recent conversations summary
   - Performance metrics

2. Create frontend/src/components/admin/InventoryManagement.jsx for inventory control

3. Create frontend/src/components/admin/ConversationAnalytics.jsx to show conversation insights

4. Create frontend/src/services/adminService.js for admin API interactions

Include authentication and authorization controls for admin access.
```

## Prompt 9: Docker Configuration

```
Set up Docker for development and deployment:

1. Create docker/Dockerfile.frontend for the React application

2. Create docker/Dockerfile.backend for the Flask backend

3. Create docker-compose.yml in the project root with:
   - Services for frontend, backend, and MongoDB
   - Volume mappings for development
   - Environment variable configuration

Include appropriate .dockerignore files to optimize builds.
```

## Prompt 10: Testing Suite

```
Implement comprehensive testing:

1. Create tests/test_intent_classifier.py to test intent classification accuracy

2. Create tests/test_entity_extractor.py for entity extraction validation

3. Create tests/test_api_endpoints.py for API integration testing

4. Create frontend/src/tests/ directory with Jest tests for React components

5. Create a GitHub Actions workflow file for CI/CD in .github/workflows/main.yml

Include code coverage reporting and performance benchmarks.
```

## Prompt 11: Documentation

```
Create comprehensive documentation:

1. Update README.md with:
   - Detailed project overview
   - Setup instructions
   - Developer guidelines
   - API documentation

2. Create docs/ directory with:
   - Architecture diagrams (docs/architecture.md)
   - API reference (docs/api-reference.md)
   - NLP capabilities documentation (docs/nlp-capabilities.md)
   - Deployment guides (docs/deployment.md)

Use Markdown format for all documentation files.
```

## Prompt 12: Deployment Configuration

```
Prepare the project for deployment:

1. Create deployment/kubernetes/ directory with Kubernetes manifests:
   - frontend deployment and service
   - backend deployment and service
   - MongoDB statefulset

2. Create deployment/terraform/ with infrastructure as code:
   - VPC and network configuration
   - Cluster setup
   - Monitoring resources

3. Create scripts/deploy.sh for automated deployment

Include security best practices and production optimization.
```

## Prompt 13: Implementation of Inventory Policies

```
Implement the three inventory policies mentioned in the requirements:

1. Update business_logic/inventory_manager.py to include:
   - ConservativeInventoryPolicy class with high safety stock levels
   - LeanInventoryPolicy class implementing just-in-time principles
   - BalancedInventoryPolicy class with dynamic optimization

2. Create ml_models/inventory_optimizer.py with:
   - Machine learning model to recommend optimal policy based on product characteristics
   - Historical performance evaluation
   - Supply chain disruption simulation

3. Update admin dashboard to allow policy selection and visualization of impacts

Include a discrete event simulation capability to test policy performance.
```

## Prompt 14: Discrete Event Simulation for Inventory

```
Implement a discrete event simulation system to evaluate inventory policies:

1. Create business_logic/simulation/discrete_event_simulator.py with:
   - Event handling framework
   - Clock advancement logic
   - State tracking mechanisms

2. Create business_logic/simulation/inventory_events.py with:
   - Customer order events
   - Shipment arrival events
   - Stockout events
   - Reorder point triggers

3. Create business_logic/simulation/simulation_analyzer.py to evaluate performance metrics

Add visualization capabilities to display simulation results in the admin dashboard.
```

## Prompt 15: Final Integration and Testing

```
Perform final integration and system testing:

1. Update app.py to connect all components

2. Create tests/test_integration.py with end-to-end tests

3. Create scripts/load_test.py to simulate high-volume usage

4. Update frontend to include all features in a cohesive UI

5. Create a demonstration script that showcases the complete system capabilities

Perform security audits and address any vulnerabilities.
```

## Implementation Execution Plan

To execute this implementation using Claude Code:

1. Feed each prompt in sequence, allowing Claude Code to complete each step before moving to the next
2. Review the code generated after each prompt for correctness and alignment with requirements
3. Make necessary adjustments before proceeding to the next prompt
4. After all prompts are executed, conduct a comprehensive review of the entire codebase
5. Run tests to ensure all components work together as expected
6. Deploy using the provided deployment configurations

This structured approach ensures a systematic implementation of the Business Virtual Assistant project with clear progression from core components to a complete, deployable system.